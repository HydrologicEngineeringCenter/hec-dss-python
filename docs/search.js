window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "hecdss", "modulename": "hecdss", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "hecdss.array_container", "modulename": "hecdss.array_container", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "hecdss.array_container.ArrayContainer", "modulename": "hecdss.array_container", "qualname": "ArrayContainer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "hecdss.array_container.ArrayContainer.id", "modulename": "hecdss.array_container", "qualname": "ArrayContainer.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.array_container.ArrayContainer.int_values", "modulename": "hecdss.array_container", "qualname": "ArrayContainer.int_values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.array_container.ArrayContainer.float_values", "modulename": "hecdss.array_container", "qualname": "ArrayContainer.float_values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.array_container.ArrayContainer.double_values", "modulename": "hecdss.array_container", "qualname": "ArrayContainer.double_values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.array_container.ArrayContainer.create_array_container", "modulename": "hecdss.array_container", "qualname": "ArrayContainer.create_array_container", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">int_values</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">float_values</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">double_values</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.catalog", "modulename": "hecdss.catalog", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "hecdss.catalog.Catalog", "modulename": "hecdss.catalog", "qualname": "Catalog", "kind": "class", "doc": "<p>manage list of objects inside a DSS database</p>\n"}, {"fullname": "hecdss.catalog.Catalog.__init__", "modulename": "hecdss.catalog", "qualname": "Catalog.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">uncondensed_paths</span>, </span><span class=\"param\"><span class=\"n\">recordTypes</span></span>)</span>"}, {"fullname": "hecdss.catalog.Catalog.uncondensed_paths", "modulename": "hecdss.catalog", "qualname": "Catalog.uncondensed_paths", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.catalog.Catalog.rawRecordTypes", "modulename": "hecdss.catalog", "qualname": "Catalog.rawRecordTypes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.catalog.Catalog.timeSeriesDictNoDates", "modulename": "hecdss.catalog", "qualname": "Catalog.timeSeriesDictNoDates", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.catalog.Catalog.recordTypeDict", "modulename": "hecdss.catalog", "qualname": "Catalog.recordTypeDict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.catalog.Catalog.get_record_type", "modulename": "hecdss.catalog", "qualname": "Catalog.get_record_type", "kind": "function", "doc": "<p>gets the record type for a given path</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pathname (str):</strong>  dss pathname</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>RecordType: the record type <code>hecdss.RecordType</code> of DSS data stored in this pathname</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pathname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.catalog.Catalog.print", "modulename": "hecdss.catalog", "qualname": "Catalog.print", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.cwms_utility", "modulename": "hecdss.cwms_utility", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "hecdss.cwms_utility.CwmsUtility", "modulename": "hecdss.cwms_utility", "qualname": "CwmsUtility", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "hecdss.cwms_utility.CwmsUtility.CWMS_DSS_INTERVAL_MAP", "modulename": "hecdss.cwms_utility", "qualname": "CwmsUtility.CWMS_DSS_INTERVAL_MAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;1Minute&#x27;: &#x27;1Minute&#x27;, &#x27;2Minutes&#x27;: &#x27;2Minute&#x27;, &#x27;3Minutes&#x27;: &#x27;3Minute&#x27;, &#x27;4Minutes&#x27;: &#x27;4Minute&#x27;, &#x27;5Minutes&#x27;: &#x27;5Minute&#x27;, &#x27;6Minutes&#x27;: &#x27;6Minute&#x27;, &#x27;12Minutes&#x27;: &#x27;12Minute&#x27;, &#x27;15Minutes&#x27;: &#x27;15Minute&#x27;, &#x27;20Minutes&#x27;: &#x27;20Minute&#x27;, &#x27;30Minutes&#x27;: &#x27;30Minute&#x27;, &#x27;1Hour&#x27;: &#x27;1Hour&#x27;, &#x27;2Hours&#x27;: &#x27;2Hour&#x27;, &#x27;3Hours&#x27;: &#x27;3Hour&#x27;, &#x27;4Hours&#x27;: &#x27;4Hour&#x27;, &#x27;6Hours&#x27;: &#x27;6Hour&#x27;, &#x27;8Hours&#x27;: &#x27;8Hour&#x27;, &#x27;12Hours&#x27;: &#x27;12Hour&#x27;, &#x27;1Day&#x27;: &#x27;1Day&#x27;, &#x27;1Week&#x27;: &#x27;1Week&#x27;, &#x27;1Month&#x27;: &#x27;1Month&#x27;, &#x27;1Year&#x27;: &#x27;1Year&#x27;, &#x27;0&#x27;: &#x27;Ir-Month&#x27;}"}, {"fullname": "hecdss.cwms_utility.CwmsUtility.DSS_CWMS_INTERVAL_MAP", "modulename": "hecdss.cwms_utility", "qualname": "CwmsUtility.DSS_CWMS_INTERVAL_MAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;1minute&#x27;: &#x27;1Minute&#x27;, &#x27;2minute&#x27;: &#x27;2Minutes&#x27;, &#x27;3minute&#x27;: &#x27;3Minutes&#x27;, &#x27;4minute&#x27;: &#x27;4Minutes&#x27;, &#x27;5minute&#x27;: &#x27;5Minutes&#x27;, &#x27;6minute&#x27;: &#x27;6Minutes&#x27;, &#x27;12minute&#x27;: &#x27;12Minutes&#x27;, &#x27;15minute&#x27;: &#x27;15Minutes&#x27;, &#x27;20minute&#x27;: &#x27;20Minutes&#x27;, &#x27;30minute&#x27;: &#x27;30Minutes&#x27;, &#x27;1hour&#x27;: &#x27;1Hour&#x27;, &#x27;2hour&#x27;: &#x27;2Hours&#x27;, &#x27;3hour&#x27;: &#x27;3Hours&#x27;, &#x27;4hour&#x27;: &#x27;4Hours&#x27;, &#x27;6hour&#x27;: &#x27;6Hours&#x27;, &#x27;8hour&#x27;: &#x27;8Hours&#x27;, &#x27;12hour&#x27;: &#x27;12Hours&#x27;, &#x27;1day&#x27;: &#x27;1Day&#x27;, &#x27;1week&#x27;: &#x27;1Week&#x27;, &#x27;1month&#x27;: &#x27;1Month&#x27;, &#x27;1year&#x27;: &#x27;1Year&#x27;, &#x27;ir-month&#x27;: &#x27;0&#x27;, &#x27;ir-day&#x27;: &#x27;0&#x27;, &#x27;ir-year&#x27;: &#x27;0&#x27;, &#x27;ir-decade&#x27;: &#x27;0&#x27;, &#x27;ir-century&#x27;: &#x27;0&#x27;}"}, {"fullname": "hecdss.cwms_utility.CwmsUtility.get_cwms_parameter_type", "modulename": "hecdss.cwms_utility", "qualname": "CwmsUtility.get_cwms_parameter_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dss_type</span><span class=\"p\">:</span> <span class=\"n\">hecdss</span><span class=\"o\">.</span><span class=\"n\">dss_type</span><span class=\"o\">.</span><span class=\"n\">DssType</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.cwms_utility.CwmsUtility.pathname_to_cwms_tsid", "modulename": "hecdss.cwms_utility", "qualname": "CwmsUtility.pathname_to_cwms_tsid", "kind": "function", "doc": "<p>pathname is a dsspath name. Example: /TULA//Flow//1Hour/Ccp-Rev/\ntype is</p>\n\n<p>returns CWMS convention time-series-id\n[Location]-[sub-location].[Parameter]-[sub-parameter].[Type].[Interval].[Duration].[Version]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">dss_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"s1\">&#39;0&#39;</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.cwms_utility.CwmsUtility.cwms_ts_id_to_dss_path", "modulename": "hecdss.cwms_utility", "qualname": "CwmsUtility.cwms_ts_id_to_dss_path", "kind": "function", "doc": "<p>convert cwms time-series id to a dss path\nexample input:\n\"NORK-Norton-Prairie_Dog.Stage.Inst.15Minutes.0.nwklrgs-raw\"\nexample output:\n\"//NORK-Norton-Prairie_Dog/Stage/01Apr2024/15Minute/nwklrgs-raw/\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ts_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hecdss</span><span class=\"o\">.</span><span class=\"n\">dsspath</span><span class=\"o\">.</span><span class=\"n\">DssPath</span>:</span></span>", "funcdef": "def"}, {"fullname": "hecdss.cwms_utility.CwmsUtility.dss_data_type_from_cwms_tsid", "modulename": "hecdss.cwms_utility", "qualname": "CwmsUtility.dss_data_type_from_cwms_tsid", "kind": "function", "doc": "<p>takes an input id such as 'TULA.Flow.Inst.1Hour.0.Ccp-Rev'\nand returns the DSS DataType  'INST-VAL' in this example</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cwms_tsid</strong>:  input time-series identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string representing a dss data type</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cwms_tsid</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hecdss.dateconverter", "modulename": "hecdss.dateconverter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "hecdss.dateconverter.DateConverter", "modulename": "hecdss.dateconverter", "qualname": "DateConverter", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "hecdss.dateconverter.DateConverter.dss_datetime_strings_from_datetime", "modulename": "hecdss.dateconverter", "qualname": "DateConverter.dss_datetime_strings_from_datetime", "kind": "function", "doc": "<p>convert python datetime to DSS 24:00 style string\n2023-08-25 09:32:46.832952 -> 25Aug2023 09:23:47\n2023-08-25 00:00:00.0000000 -> 24Aug2023 24:00\n2023-08-25 00:10:00.0000000 -> 25Aug2023 00:10</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.dateconverter.DateConverter.date_time_from_julian_second", "modulename": "hecdss.dateconverter", "qualname": "DateConverter.date_time_from_julian_second", "kind": "function", "doc": "<p>\"\nconvert from DSS integer datetime to python datetime array</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">time_julian</span>, </span><span class=\"param\"><span class=\"n\">seconds_julian</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.dateconverter.DateConverter.date_times_from_julian_array", "modulename": "hecdss.dateconverter", "qualname": "DateConverter.date_times_from_julian_array", "kind": "function", "doc": "<p>\"\nconvert from DSS integer datetime array to python datetime array</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">times_julian</span>, </span><span class=\"param\"><span class=\"n\">time_granularity_seconds</span>, </span><span class=\"param\"><span class=\"n\">julian_base_date</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.dateconverter.DateConverter.julian_array_from_date_times", "modulename": "hecdss.dateconverter", "qualname": "DateConverter.julian_array_from_date_times", "kind": "function", "doc": "<p>\"\nconvert from DSS integer datetime array to python datetime array</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">date_times</span>,</span><span class=\"param\">\t<span class=\"n\">time_granularity_seconds</span><span class=\"o\">=</span><span class=\"mi\">60</span>,</span><span class=\"param\">\t<span class=\"n\">start_date_base</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">1900</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.dateconverter.DateConverter.intervalString_to_sec", "modulename": "hecdss.dateconverter", "qualname": "DateConverter.intervalString_to_sec", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interval</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.dateconverter.DateConverter.sec_to_intervalString", "modulename": "hecdss.dateconverter", "qualname": "DateConverter.sec_to_intervalString", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.download_hecdss", "modulename": "hecdss.download_hecdss", "kind": "module", "doc": "<p>Helper module to retrieve the binary libraries</p>\n"}, {"fullname": "hecdss.download_hecdss.download_and_unzip", "modulename": "hecdss.download_hecdss", "qualname": "download_and_unzip", "kind": "function", "doc": "<p>Retrieves a compressed archive from the URL and extracts it in the destination dir.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>url : str\n    URL to the archive.\nzip_file : str\n    Name of the local target archive.\ndestination_dir :\n    Path to the local directory where the archive content is extracted to.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">zip_file</span>, </span><span class=\"param\"><span class=\"n\">destination_dir</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.download_hecdss.base_url", "modulename": "hecdss.download_hecdss", "qualname": "base_url", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://www.hec.usace.army.mil/nexus/repository/maven-public/mil/army/usace/hec/hecdss/&#x27;"}, {"fullname": "hecdss.download_hecdss.version", "modulename": "hecdss.download_hecdss", "qualname": "version", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;7-IU-6&#x27;"}, {"fullname": "hecdss.download_hecdss.destination_dir", "modulename": "hecdss.download_hecdss", "qualname": "destination_dir", "kind": "variable", "doc": "<p></p>\n", "default_value": "WindowsPath(&#x27;C:/project/hec-dss-python/src/hecdss/lib&#x27;)"}, {"fullname": "hecdss.download_hecdss.zip_url", "modulename": "hecdss.download_hecdss", "qualname": "zip_url", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://www.hec.usace.army.mil/nexus/repository/maven-public/mil/army/usace/hec/hecdss/7-IU-6-linux-x86_64/hecdss-7-IU-6-linux-x86_64.zip&#x27;"}, {"fullname": "hecdss.dss_type", "modulename": "hecdss.dss_type", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "hecdss.dss_type.DssType", "modulename": "hecdss.dss_type", "qualname": "DssType", "kind": "class", "doc": "<p>Enum class representing different types of DSS (Data Storage System) types.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>PER_AVER (str):</strong>  Period average.</li>\n<li><strong>PER_CUM (str):</strong>  Period cumulative.</li>\n<li><strong>INST_VAL (str):</strong>  Instantaneous value.</li>\n<li><strong>INST_CUM (str):</strong>  Instantaneous cumulative.</li>\n<li><strong>FREQ (str):</strong>  Frequency (not a DSS standard yet).</li>\n<li><strong>PER_MAX (str):</strong>  Period maximum (not a DSS standard yet).</li>\n<li><strong>PER_MIN (str):</strong>  Period minimum (not a DSS standard yet).</li>\n<li><strong>CONST (str):</strong>  Constant (not a DSS standard yet).</li>\n</ul>\n", "bases": "enum.Enum"}, {"fullname": "hecdss.dss_type.DssType.PER_AVER", "modulename": "hecdss.dss_type", "qualname": "DssType.PER_AVER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DssType.PER_AVER: &#x27;PER-AVER&#x27;&gt;"}, {"fullname": "hecdss.dss_type.DssType.PER_CUM", "modulename": "hecdss.dss_type", "qualname": "DssType.PER_CUM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DssType.PER_CUM: &#x27;PER-CUM&#x27;&gt;"}, {"fullname": "hecdss.dss_type.DssType.INST_VAL", "modulename": "hecdss.dss_type", "qualname": "DssType.INST_VAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DssType.INST_VAL: &#x27;INST-VAL&#x27;&gt;"}, {"fullname": "hecdss.dss_type.DssType.INST_CUM", "modulename": "hecdss.dss_type", "qualname": "DssType.INST_CUM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DssType.INST_CUM: &#x27;INST-CUM&#x27;&gt;"}, {"fullname": "hecdss.dss_type.DssType.FREQ", "modulename": "hecdss.dss_type", "qualname": "DssType.FREQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DssType.FREQ: &#x27;FREQ&#x27;&gt;"}, {"fullname": "hecdss.dss_type.DssType.PER_MAX", "modulename": "hecdss.dss_type", "qualname": "DssType.PER_MAX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DssType.PER_MAX: &#x27;PER-MAX&#x27;&gt;"}, {"fullname": "hecdss.dss_type.DssType.PER_MIN", "modulename": "hecdss.dss_type", "qualname": "DssType.PER_MIN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DssType.PER_MIN: &#x27;PER-MIN&#x27;&gt;"}, {"fullname": "hecdss.dss_type.DssType.CONST", "modulename": "hecdss.dss_type", "qualname": "DssType.CONST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DssType.CONST: &#x27;CONST&#x27;&gt;"}, {"fullname": "hecdss.dsspath", "modulename": "hecdss.dsspath", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "hecdss.dsspath.DssPath", "modulename": "hecdss.dsspath", "qualname": "DssPath", "kind": "class", "doc": "<p>Manage parts of DSS path /A/B/C/D/E/F/\ncondenses D part for timeseries records</p>\n"}, {"fullname": "hecdss.dsspath.DssPath.__init__", "modulename": "hecdss.dsspath", "qualname": "DssPath.__init__", "kind": "function", "doc": "<p>Initialize a DssPath object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  Raw DSS pathname.</li>\n<li><strong>recType (RecordType, optional):</strong>  Type of the record, such as RecordType.RegularTimeSeries. Defaults to 0.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the DSS path is invalid.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">recType</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "hecdss.dsspath.DssPath.recType", "modulename": "hecdss.dsspath", "qualname": "DssPath.recType", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.dsspath.DssPath.path_without_date", "modulename": "hecdss.dsspath", "qualname": "DssPath.path_without_date", "kind": "function", "doc": "<p>Get the DSS path without the date part (D part).</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>DssPath: A new DssPath object without the date part.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.dsspath.DssPath.is_time_series", "modulename": "hecdss.dsspath", "qualname": "DssPath.is_time_series", "kind": "function", "doc": "<p>Check if the DSS path is a time series.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the DSS path is a time series, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.dsspath.DssPath.print", "modulename": "hecdss.dsspath", "qualname": "DssPath.print", "kind": "function", "doc": "<p>Print the parts of the DSS path.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.gridded_data", "modulename": "hecdss.gridded_data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.NULL_INT", "modulename": "hecdss.gridded_data", "qualname": "NULL_INT", "kind": "variable", "doc": "<p></p>\n", "default_value": "-3.4028234663852886e+38"}, {"fullname": "hecdss.gridded_data.GriddedData", "modulename": "hecdss.gridded_data", "qualname": "GriddedData", "kind": "class", "doc": "<p>Container for gridded (Raster) data.</p>\n\n<h6 id=\"properties\">Properties:</h6>\n\n<blockquote>\n  <p>id (str): DSS pathname.\n  type (int): Grid type.\n      400: Undefined grid with time.\n      401: Undefined grid.\n      410: HRAP grid with time reference.\n      411: HRAP grid.\n      420: Albers with time reference.\n      421: Albers.\n      430: Specified Grid with time reference.\n      431: Specified Grid.\n  dataType (int): Data type.\n      PER_AVER = 0.\n      PER_CUM = 1.\n      INST_VAL = 2.\n      INST_CUM = 3.\n      FREQ = 4.\n      INVALID = 5.\n  lowerLeftCellX (int): X coordinate of the lower left cell.\n  lowerLeftCellY (int): Y coordinate of the lower left cell.\n  numberOfCellsX (int): Number of cells in the X direction.\n  numberOfCellsY (int): Number of cells in the Y direction.\n  numberOfRanges (int): Number of ranges.\n  srsDefinitionType (int): SRS definition type.\n  timeZoneRawOffset (int): Time zone raw offset.\n  isInterval (int): Interval flag.\n  isTimeStamped (int): Timestamp flag.\n  dataUnits (str): Data units.\n  dataSource (str): Data source.\n  srsName (str): SRS name.\n  srsDefinition (str): SRS definition.\n  timeZoneID (str): Time zone ID.\n  cellSize (float): Cell size.\n  xCoordOfGridCellZero (float): X coordinate of grid cell zero.\n  yCoordOfGridCellZero (float): Y coordinate of grid cell zero.\n  nullValue (float): Null value.\n  maxDataValue (float): Maximum data value.\n  minDataValue (float): Minimum data value.\n  meanDataValue (float): Mean data value.\n  rangeLimitTable (list): Range limit table.\n  numberEqualOrExceedingRangeLimit (list): Number equal or exceeding range limit.\n  data (numpy.ndarray): Data array.</p>\n</blockquote>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.__init__", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.__init__", "kind": "function", "doc": "<p>Initialize a GriddedData object with default values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "hecdss.gridded_data.GriddedData.id", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.type", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.data_type", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.data_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.lowerLeftCellX", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.lowerLeftCellX", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.lowerLeftCellY", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.lowerLeftCellY", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.numberOfCellsX", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.numberOfCellsX", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.numberOfCellsY", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.numberOfCellsY", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.numberOfRanges", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.numberOfRanges", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.srsDefinitionType", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.srsDefinitionType", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.timeZoneRawOffset", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.timeZoneRawOffset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.isInterval", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.isInterval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.isTimeStamped", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.isTimeStamped", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.dataUnits", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.dataUnits", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.dataSource", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.dataSource", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.srsName", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.srsName", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.srsDefinition", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.srsDefinition", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.timeZoneID", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.timeZoneID", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.cellSize", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.cellSize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.xCoordOfGridCellZero", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.xCoordOfGridCellZero", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.yCoordOfGridCellZero", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.yCoordOfGridCellZero", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.nullValue", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.nullValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.maxDataValue", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.maxDataValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.minDataValue", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.minDataValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.meanDataValue", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.meanDataValue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.rangeLimitTable", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.rangeLimitTable", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.numberEqualOrExceedingRangeLimit", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.numberEqualOrExceedingRangeLimit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.data", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.gridded_data.GriddedData.range_limit_table", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.range_limit_table", "kind": "function", "doc": "<p>Calculate the range limit table and the number of values equal or exceeding each range limit.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>minval (float):</strong>  Minimum value.</li>\n<li><strong>maxval (float):</strong>  Maximum value.</li>\n<li><strong>range_ (float):</strong>  Range of values.</li>\n<li><strong>bins (int):</strong>  Number of bins.</li>\n<li><strong>datasize (int):</strong>  Size of the data.</li>\n<li><strong>data (numpy.ndarray):</strong>  Data array.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">minval</span>, </span><span class=\"param\"><span class=\"n\">maxval</span>, </span><span class=\"param\"><span class=\"n\">range_</span>, </span><span class=\"param\"><span class=\"n\">bins</span>, </span><span class=\"param\"><span class=\"n\">datasize</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.gridded_data.GriddedData.update_grid_info", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.update_grid_info", "kind": "function", "doc": "<p>Update grid information based on the data array.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.gridded_data.GriddedData.create", "modulename": "hecdss.gridded_data", "qualname": "GriddedData.create", "kind": "function", "doc": "<p>Create a new GriddedData object with the specified parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str, optional):</strong>  DSS pathname. Defaults to None.</li>\n<li><strong>type (int, optional):</strong>  Grid type. Defaults to 420.</li>\n<li><strong>dataType (int, optional):</strong>  Data type. Defaults to 1.</li>\n<li><strong>lowerLeftCellX (int, optional):</strong>  X coordinate of the lower left cell. Defaults to 0.</li>\n<li><strong>lowerLeftCellY (int, optional):</strong>  Y coordinate of the lower left cell. Defaults to 0.</li>\n<li><strong>numberOfCellsX (int, optional):</strong>  Number of cells in the X direction. Defaults to 0.</li>\n<li><strong>numberOfCellsY (int, optional):</strong>  Number of cells in the Y direction. Defaults to 0.</li>\n<li><strong>numberOfRanges (int, optional):</strong>  Number of ranges. Defaults to 0.</li>\n<li><strong>srsDefinitionType (int, optional):</strong>  SRS definition type. Defaults to 0.</li>\n<li><strong>timeZoneRawOffset (int, optional):</strong>  Time zone raw offset. Defaults to 0.</li>\n<li><strong>isInterval (int, optional):</strong>  Interval flag. Defaults to 0.</li>\n<li><strong>isTimeStamped (int, optional):</strong>  Timestamp flag. Defaults to 0.</li>\n<li><strong>dataUnits (str, optional):</strong>  Data units. Defaults to \"MM\".</li>\n<li><strong>dataSource (str, optional):</strong>  Data source. Defaults to \"\".</li>\n<li><strong>srsName (str, optional):</strong>  SRS name. Defaults to \"WKT\".</li>\n<li><strong>srsDefinition (str, optional):</strong>  SRS definition. Defaults to a specific Albers projection.</li>\n<li><strong>timeZoneID (str, optional):</strong>  Time zone ID. Defaults to \"\".</li>\n<li><strong>cellSize (float, optional):</strong>  Cell size. Defaults to 2000.0.</li>\n<li><strong>xCoordOfGridCellZero (float, optional):</strong>  X coordinate of grid cell zero. Defaults to 0.0.</li>\n<li><strong>yCoordOfGridCellZero (float, optional):</strong>  Y coordinate of grid cell zero. Defaults to 0.0.</li>\n<li><strong>nullValue (float, optional):</strong>  Null value. Defaults to 0.0.</li>\n<li><strong>maxDataValue (float, optional):</strong>  Maximum data value. Defaults to 0.0.</li>\n<li><strong>minDataValue (float, optional):</strong>  Minimum data value. Defaults to 0.0.</li>\n<li><strong>meanDataValue (float, optional):</strong>  Mean data value. Defaults to 0.0.</li>\n<li><strong>rangeLimitTable (list, optional):</strong>  Range limit table. Defaults to [].</li>\n<li><strong>numberEqualOrExceedingRangeLimit (list, optional):</strong>  Number equal or exceeding range limit. Defaults to [].</li>\n<li><strong>data (numpy.ndarray, optional):</strong>  Data array. Defaults to np.zeros(0).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>GriddedData: A new GriddedData object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"mi\">420</span>,</span><span class=\"param\">\t<span class=\"n\">dataType</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">lowerLeftCellX</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">lowerLeftCellY</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">numberOfCellsX</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">numberOfCellsY</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">numberOfRanges</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">srsDefinitionType</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">timeZoneRawOffset</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">isInterval</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">isTimeStamped</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">dataUnits</span><span class=\"o\">=</span><span class=\"s1\">&#39;MM&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataSource</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">srsName</span><span class=\"o\">=</span><span class=\"s1\">&#39;WKT&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">srsDefinition</span><span class=\"o\">=</span><span class=\"s1\">&#39;PROJCS[&quot;USA_Contiguous_Albers_Equal_Area_Conic_USGS_version&quot;,GEOGCS[&quot;GCS_North_American_1983&quot;,DATUM[&quot;D_North_American_1983&quot;,SPHEROID[&quot;GRS_1980&quot;,6378137.0,298.257222101]],PRIMEM[&quot;Greenwich&quot;,0.0],UNIT[&quot;Degree&quot;,0.0174532925199433]],PROJECTION[&quot;Albers&quot;],PARAMETER[&quot;False_Easting&quot;,0.0],PARAMETER[&quot;False_Northing&quot;,0.0],PARAMETER[&quot;Central_Meridian&quot;,-96.0],PARAMETER[&quot;Standard_Parallel_1&quot;,29.5],PARAMETER[&quot;Standard_Parallel_2&quot;,45.5],PARAMETER[&quot;Latitude_Of_Origin&quot;,23.0],UNIT[&quot;Meter&quot;,1.0]]&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">timeZoneID</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cellSize</span><span class=\"o\">=</span><span class=\"mf\">2000.0</span>,</span><span class=\"param\">\t<span class=\"n\">xCoordOfGridCellZero</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">yCoordOfGridCellZero</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">nullValue</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">maxDataValue</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">minDataValue</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">meanDataValue</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">rangeLimitTable</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">numberEqualOrExceedingRangeLimit</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.hecdss", "modulename": "hecdss.hecdss", "kind": "module", "doc": "<p>Docstring for public module.</p>\n"}, {"fullname": "hecdss.hecdss.DSS_UNDEFINED_VALUE", "modulename": "hecdss.hecdss", "qualname": "DSS_UNDEFINED_VALUE", "kind": "variable", "doc": "<p></p>\n", "default_value": "-3.4028234663852886e+38"}, {"fullname": "hecdss.hecdss.HecDss", "modulename": "hecdss.hecdss", "qualname": "HecDss", "kind": "class", "doc": "<p>Main class for working with DSS files</p>\n"}, {"fullname": "hecdss.hecdss.HecDss.__init__", "modulename": "hecdss.hecdss", "qualname": "HecDss.__init__", "kind": "function", "doc": "<p>constructor for HecDSS</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  DSS filename to be opened; it will be created if it doesn't exist.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "hecdss.hecdss.HecDss.close", "modulename": "hecdss.hecdss", "qualname": "HecDss.close", "kind": "function", "doc": "<p>closes the DSS file and releases any locks</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.hecdss.HecDss.get_record_type", "modulename": "hecdss.hecdss", "qualname": "HecDss.get_record_type", "kind": "function", "doc": "<p>Get the record type for a given DSS pathname.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pathname (str):</strong>  The DSS pathname for which to get the record type.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>RecordType: The record type of the given DSS pathname.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pathname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hecdss</span><span class=\"o\">.</span><span class=\"n\">record_type</span><span class=\"o\">.</span><span class=\"n\">RecordType</span>:</span></span>", "funcdef": "def"}, {"fullname": "hecdss.hecdss.HecDss.get", "modulename": "hecdss.hecdss", "qualname": "HecDss.get", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pathname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">startdatetime</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">enddatetime</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.hecdss.HecDss.put", "modulename": "hecdss.hecdss", "qualname": "HecDss.put", "kind": "function", "doc": "<p>puts data into the DSS file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>container (varies):</strong>  RegularTimeSeries, IrregularTimeSeries, PairedData, GriddedData, ArrayContainer</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  if saving the type of container is not supported.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: status of zero when successful. Non zero for errors.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">container</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hecdss.hecdss.HecDss.get_catalog", "modulename": "hecdss.hecdss", "qualname": "HecDss.get_catalog", "kind": "function", "doc": "<p>gets the DSS Catalog of all items in the DSS file</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Catalog: <code>Catalog</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hecdss</span><span class=\"o\">.</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">Catalog</span>:</span></span>", "funcdef": "def"}, {"fullname": "hecdss.hecdss.HecDss.record_count", "modulename": "hecdss.hecdss", "qualname": "HecDss.record_count", "kind": "function", "doc": "<p>get the number of records stored in the dss file</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: number of items  (includes aliases)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hecdss.hecdss.HecDss.set_debug_level", "modulename": "hecdss.hecdss", "qualname": "HecDss.set_debug_level", "kind": "function", "doc": "<p>sets the DSS debug level. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>level (int):</strong>  a value between 0 and 15. Larger for more output</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">level</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hecdss.irregular_timeseries", "modulename": "hecdss.irregular_timeseries", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries", "kind": "class", "doc": "<p>container for time-series data that is not at a consistent interval.\ndata is stored internally as a numpy array</p>\n"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.__init__", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.__init__", "kind": "function", "doc": "<p>Initialize an IrregularTimeSeries object with default values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.times", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.times", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.values", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.quality", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.quality", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.units", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.units", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.data_type", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.data_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.interval", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.interval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.start_date", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.start_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.time_granularity_seconds", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.time_granularity_seconds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.julian_base_date", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.julian_base_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.id", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.add_data_point", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.add_data_point", "kind": "function", "doc": "<p>append a date,value to this time-series</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.get_value_at", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.get_value_at", "kind": "function", "doc": "<p>Retrieve the value at a specific date in the time-series.</p>\n\n<p>Parameters:\ndate (datetime): The date for which to retrieve the value.</p>\n\n<p>Returns:\nfloat or None: The value at the specified date if it exists, otherwise None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.get_values", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.get_values", "kind": "function", "doc": "<p>Retrieve all values in the time-series.</p>\n\n<p>Returns:\nnumpy.ndarray: An array of all values in the time-series.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.get_dates", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.get_dates", "kind": "function", "doc": "<p>Retrieve all dates in the time-series.</p>\n\n<p>Returns:\nlist of datetime: A list of all dates in the time-series.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.get_length", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.get_length", "kind": "function", "doc": "<p>Retrieve the number of data points in the time-series.</p>\n\n<p>Returns:\nint: The number of data points in the time-series.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.print_to_console", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.print_to_console", "kind": "function", "doc": "<p>Print the time-series data to the console in a readable format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.irregular_timeseries.IrregularTimeSeries.create", "modulename": "hecdss.irregular_timeseries", "qualname": "IrregularTimeSeries.create", "kind": "function", "doc": "<p>Retrieve the value at a specific date in the time-series.</p>\n\n<p>Parameters:\ndate (datetime): The date for which to retrieve the value.</p>\n\n<p>Returns:\nfloat or None: The value at the specified date if it exists, otherwise None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">values</span>,</span><span class=\"param\">\t<span class=\"n\">times</span>,</span><span class=\"param\">\t<span class=\"n\">quality</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_granularity_seconds</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">julian_base_date</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.native", "modulename": "hecdss.native", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "hecdss.paired_data", "modulename": "hecdss.paired_data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "hecdss.paired_data.PairedData", "modulename": "hecdss.paired_data", "qualname": "PairedData", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "hecdss.paired_data.PairedData.__init__", "modulename": "hecdss.paired_data", "qualname": "PairedData.__init__", "kind": "function", "doc": "<p>Initialize a PairedData object with default values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "hecdss.paired_data.PairedData.id", "modulename": "hecdss.paired_data", "qualname": "PairedData.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.paired_data.PairedData.ordinates", "modulename": "hecdss.paired_data", "qualname": "PairedData.ordinates", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.paired_data.PairedData.values", "modulename": "hecdss.paired_data", "qualname": "PairedData.values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.paired_data.PairedData.labels", "modulename": "hecdss.paired_data", "qualname": "PairedData.labels", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.paired_data.PairedData.type_independent", "modulename": "hecdss.paired_data", "qualname": "PairedData.type_independent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.paired_data.PairedData.type_dependent", "modulename": "hecdss.paired_data", "qualname": "PairedData.type_dependent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.paired_data.PairedData.units_independent", "modulename": "hecdss.paired_data", "qualname": "PairedData.units_independent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.paired_data.PairedData.units_dependent", "modulename": "hecdss.paired_data", "qualname": "PairedData.units_dependent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.paired_data.PairedData.location_information", "modulename": "hecdss.paired_data", "qualname": "PairedData.location_information", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.paired_data.PairedData.curve_count", "modulename": "hecdss.paired_data", "qualname": "PairedData.curve_count", "kind": "function", "doc": "<p>Retrieve the number of curves in the paired data.</p>\n\n<p>Returns:\nint: The number of curves.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.paired_data.PairedData.create", "modulename": "hecdss.paired_data", "qualname": "PairedData.create", "kind": "function", "doc": "<p>Create a PairedData object with the provided data.</p>\n\n<p>Parameters:\nx_values (list of float): The independent variable values.\ny_values (list of list of float): The dependent variable values.\nlabels (list of str, optional): The labels for the dependent variables. Defaults to an empty list.\nx_units (str, optional): The units of the independent variable. Defaults to an empty string.\nx_type (str, optional): The type of the independent variable. Defaults to an empty string.\ny_units (str, optional): The units of the dependent variable. Defaults to an empty string.\ny_type (str, optional): The type of the dependent variable. Defaults to an empty string.\npath (str, optional): The path identifier for the paired data. Defaults to None.</p>\n\n<p>Returns:\nPairedData: An instance of the PairedData class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_values</span>,</span><span class=\"param\">\t<span class=\"n\">y_values</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">x_units</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">x_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y_units</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.record_type", "modulename": "hecdss.record_type", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "hecdss.record_type.RecordType", "modulename": "hecdss.record_type", "qualname": "RecordType", "kind": "class", "doc": "<p>RecordType is an enumeration of DSS data types</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>RecordType: the record type</p>\n</blockquote>\n", "bases": "enum.Enum"}, {"fullname": "hecdss.record_type.RecordType.Unknown", "modulename": "hecdss.record_type", "qualname": "RecordType.Unknown", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RecordType.Unknown: 0&gt;"}, {"fullname": "hecdss.record_type.RecordType.RegularTimeSeriesProfile", "modulename": "hecdss.record_type", "qualname": "RecordType.RegularTimeSeriesProfile", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RecordType.RegularTimeSeriesProfile: 1&gt;"}, {"fullname": "hecdss.record_type.RecordType.RegularTimeSeries", "modulename": "hecdss.record_type", "qualname": "RecordType.RegularTimeSeries", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RecordType.RegularTimeSeries: 2&gt;"}, {"fullname": "hecdss.record_type.RecordType.IrregularTimeSeries", "modulename": "hecdss.record_type", "qualname": "RecordType.IrregularTimeSeries", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RecordType.IrregularTimeSeries: 3&gt;"}, {"fullname": "hecdss.record_type.RecordType.PairedData", "modulename": "hecdss.record_type", "qualname": "RecordType.PairedData", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RecordType.PairedData: 4&gt;"}, {"fullname": "hecdss.record_type.RecordType.Text", "modulename": "hecdss.record_type", "qualname": "RecordType.Text", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RecordType.Text: 5&gt;"}, {"fullname": "hecdss.record_type.RecordType.Grid", "modulename": "hecdss.record_type", "qualname": "RecordType.Grid", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RecordType.Grid: 6&gt;"}, {"fullname": "hecdss.record_type.RecordType.Tin", "modulename": "hecdss.record_type", "qualname": "RecordType.Tin", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RecordType.Tin: 7&gt;"}, {"fullname": "hecdss.record_type.RecordType.LocationInfo", "modulename": "hecdss.record_type", "qualname": "RecordType.LocationInfo", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RecordType.LocationInfo: 8&gt;"}, {"fullname": "hecdss.record_type.RecordType.Array", "modulename": "hecdss.record_type", "qualname": "RecordType.Array", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RecordType.Array: 9&gt;"}, {"fullname": "hecdss.record_type.RecordType.SUPPORTED_RECORD_TYPES", "modulename": "hecdss.record_type", "qualname": "RecordType.SUPPORTED_RECORD_TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RecordType.SUPPORTED_RECORD_TYPES: [&#x27;IrregularTimeSeries&#x27;, &#x27;RegularTimeSeries&#x27;, &#x27;PairedData&#x27;, &#x27;GriddedData&#x27;, &#x27;ArrayContainer&#x27;]&gt;"}, {"fullname": "hecdss.record_type.RecordType.RecordTypeFromInt", "modulename": "hecdss.record_type", "qualname": "RecordType.RecordTypeFromInt", "kind": "function", "doc": "<p>Returns RecordType Enumeration from integer value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">recType</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.regular_timeseries", "modulename": "hecdss.regular_timeseries", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.__init__", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the RegularTimeSeries class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.times", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.times", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.values", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.quality", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.quality", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.units", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.units", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.data_type", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.data_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.interval", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.interval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.start_date", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.start_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.time_granularity_seconds", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.time_granularity_seconds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.id", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.add_data_point", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.add_data_point", "kind": "function", "doc": "<p>Adds a data point to the time series.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>date (datetime):</strong>  The date of the data point.</li>\n<li><strong>value (float):</strong>  The value of the data point.</li>\n<li><strong>flag (int, optional):</strong>  The quality flag of the data point. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">flag</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.get_value_at", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.get_value_at", "kind": "function", "doc": "<p>Retrieves the value at a specific date.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>date (datetime):</strong>  The date for which to retrieve the value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The value at the specified date, or None if the date is not found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.get_values", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.get_values", "kind": "function", "doc": "<p>Retrieves all values in the time series.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>numpy.ndarray: An array of all values in the time series.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.get_dates", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.get_dates", "kind": "function", "doc": "<p>Retrieves all dates in the time series.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: A list of all dates in the time series.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.get_length", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.get_length", "kind": "function", "doc": "<p>Retrieves the number of data points in the time series.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of data points in the time series.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.print_to_console", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.print_to_console", "kind": "function", "doc": "<p>Prints the time series data to the console.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hecdss.regular_timeseries.RegularTimeSeries.create", "modulename": "hecdss.regular_timeseries", "qualname": "RegularTimeSeries.create", "kind": "function", "doc": "<p>Creates a new instance of the RegularTimeSeries class with the specified parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list):</strong>  List of data values.</li>\n<li><strong>times (list, optional):</strong>  List of time values. Defaults to [].</li>\n<li><strong>quality (list, optional):</strong>  List of quality values. Defaults to [].</li>\n<li><strong>units (str, optional):</strong>  Units of the data. Defaults to \"\".</li>\n<li><strong>data_type (str, optional):</strong>  Type of the data. Defaults to \"\".</li>\n<li><strong>interval (str, optional):</strong>  Interval of the time series. Defaults to \"\".</li>\n<li><strong>start_date (str, optional):</strong>  Start date of the time series. Defaults to \"\".</li>\n<li><strong>time_granularity_seconds (int, optional):</strong>  Time granularity in seconds. Defaults to 1.</li>\n<li><strong>julian_base_date (int, optional):</strong>  Julian base date. Defaults to 0.</li>\n<li><strong>path (str, optional):</strong>  DSS path. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>RegularTimeSeries: A new instance of the RegularTimeSeries class.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">values</span>,</span><span class=\"param\">\t<span class=\"n\">times</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">quality</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_granularity_seconds</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">julian_base_date</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();